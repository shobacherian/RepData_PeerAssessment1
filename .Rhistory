library()
install packages<swirl>
install.packages<swirl>
install.packages(swirl)
install.packages(ggplot2)
install.packages(ggplot2)
install.packages("swirl")
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
library("swirl", lib.loc="~/R/R-3.1.3/library")
detach("package:swirl", unload=TRUE)
swirl()
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
touch Helloworld.md
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
main()
2
c(3,2,1)
exit
q()
library("swirl", lib.loc="~/R/R-3.1.3/library")
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my-sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my
my_D
my_Div
my_div
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args()
args(list.files)
getwd()
old.dir<-getwd()
dir.creat()
getwd
info()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls(file.create)
ls
list.files()
file.exists()
file.exists("mytest.R")
file.info()
file.info("mytest.R")
file.rename("mytest.R" to "mytest2.R")
file.rename(mytest.R to mytest2.R)
file.rename("mytest2.R")
file.rename("mytest.R to mytest2.R")
file.renmame(mytest.R "to"mytest2.R)
?file.rename
file.rename(mytest.R,mytest2.R)
file.rename("mytest.R"to"mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2")file.path("testdir3")
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'))
dir.creat(file.path("testdir2","testdir3"),recursive = TRUE)
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2")
unlink("testdir2",recursive=TRUE)
setwd()
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0:10,by=0.5)
seq(0,10,by=0.5)
my_seq<-(5,10,length=30)
my
my_seq<-seq(5,10,length=30)
length()
length(myseq)
my_seq
length(my_seq)
: 1 : length(my_seq)
':'length(my_seq)
:length(my_seq)
:1:length9my_seq)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
re(0,times=40)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
x
x <- 4L
getwd()
dietdata
ls
list(... = )
dietdata
dietdata<-read.csv("Andy.csv")
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(myvector)
length()
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes()
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
matrix(x)
?matrix
my_matrix2<-1:20(4,5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
byebye
patients<-"Bill,Gina,Kelly,Sean"
patients<-c("Bill,Gina,Kelly,Sean")
info()
patients<-matrix("Bill,Gina,Kelly,Sena")
patients<-c("Bill","Gina","Kelly","sean")
patients<-"Bill","Gina"
patients<-c("Bill","Gina")
patients<-matrix
?charactervector
?character
patients<-as.character("AA,BB")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(the patients vector, my_matrix)
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class()
class(my_data)
cnames<-("patient","age","weight","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7==TRUE
6<7
10<==10
10<=10
5!=7
5==7!TRUE(say:not true)
5!=7(say:not true)
7=5!TRUE(say:not true)
5!=7TRUE(say:not true)
5!=7(say:not true)
5!=7(say:true)
?NOT operator
?NOT
!TRUE
5!==7
5!==7(say:true)
5!==7TRUE(say:true)
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,TRUE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8||6 !=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(c(ints>7))
ints>7
which (ints>7)
any(ints<0)
all(ints<0)
all(ints>0)
sys.Date()
Sys.Date()
mean(c(2,4,5))
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
}
x
boring_function <- function(4) {
4
}
boring_function <- function(x) {
x
}
submit()
boring_function('My first function!')
boring-function
boring_function
boring_function
my_mean <- function(my_vector) {
mean(1:x)
# Remember: the last expression evaluated will be returned!
}
my_mean(1:4)
my_mean <- function(my_vector) {
+   mean(1:x)
+   # Remember: the last expression evaluated will be returned!
+ }
my_mean(2,4)
my_mean(1:4)
submit()
?avg
y_mean <- function(C:\\Users\\SSCHER\\Desktop\\Coursera) {
+   +   mean(1:x)
makeCacheMatrix <- function(x = matrix()) {
inv<- NULL
set<- function(y) {
x<<-y
inv<<-NULL
}
get<-function()x
setinverse<-function(inverse)inv<<-inverse
getinverse<-function() inv
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<- x$getinverse()
if(!is.null(inv)){
message("getting cached data.")
return(inv)
}
data<-x$get(
inv<- solve(data)
x$setinverse(inv)
inv
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data<-x$get(
inv<- solve(data)
x$setinverse(inv)
inv
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<- x$getinverse()
if(!is.null(inv)){
message("getting cached data.")
return(inv)
}
data<- x$get()
inv<- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
m = makeCacheMatrix(x)
m$get()
m$get()
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inv<- NULL
set<- function(y) {
x<<-y
inv<<-NULL
}
get<-function()x
setinverse<-function(inverse)inv<<-inverse
getinverse<-function() inv
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
## The below functio
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv<- x$getinverse()
if(!is.null(inv)){
message("getting cached data.")
return(inv)
}
data<- x$get()
inv<- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
?group_by
by_package <- group_by(cran, package)
by_package
summarize()
summarize(by_package, mean(size))
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
script_results_identical('pack_sum'); multi_expr_creates_var('pack_sum')
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
script_results_identical('pack_sum')
info()
skip()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
?arrange
?desc
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
# Don't change any of the code below. Just type submit()
submit()
s# Don't change any of the code below. Just type submit()
submit()
submit()
View(result3)
# select() the following columns from cran. Keep in mind
script_vals_identical()
skip()
submit()
skip()
submit()
skip()
submit()
skip()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
bye()
library("swirl", lib.loc="~/R/R-3.1.3/library")
swirl()
this_moment<-now()
this_moment
this_hour<-hour()
this_moment(hour)
?grepl
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
setwd("C:/Users/SSCHER/Desktop/Coursera/Reproducible research/Peer assessment 1")
file=read.csv("activity.csv", header=T)
names(file)
setwd("C:/Users/SSCHER/Desktop/Coursera/Reproducible research/activity")
setwd("C:/Users/SSCHER/Desktop/Coursera/Reproducible research/Peer assessment 1")
setwd("C:/Users/SSCHER/Desktop/Coursera/Reproducible research")
